security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Users
                property: email
    enable_authenticator_manager: true
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                username_path: email
                password_path: password
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

#            login_throttling: null
#                login_throttling:
#                    max_attempts: 3
#                login_throttling:
#                    limiter: app.my_login_rate_limiter

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/login_check, roles: PUBLIC_ACCESS }

        - { path: ^/api/article, roles: PUBLIC_ACCESS,  methods: [ GET ] }
        - { path: ^/api/article, roles: ROLE_USER,  methods: [ DELETE, PUT, POST ] }

        - { path: ^/api/comment, roles: PUBLIC_ACCESS,  methods: [ GET ] }
        - { path: ^/api/comment, roles: ROLE_USER,  methods: [ DELETE, PUT, POST ] }

        - { path: ^/api/category, roles: ROLE_ADMIN,  methods: [DELETE, PUT, POST]  }
        - { path: ^/api/label, roles: ROLE_ADMIN,  methods: [DELETE, PUT, POST]  }

        - { path: ^/api/user/$, roles: PUBLIC_ACCESS,  methods: [ POST ] }
        - { path: ^/api/user/^, roles: ROLE_USER,  methods: [GET]  }
        - { path: ^/api/user, roles: ROLE_ADMIN,  methods: [GET]  }
        - { path: ^/api/user, roles: ROLE_USER,  methods: [DELETE, PUT]  }

        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
